// Mocks generated by Mockito 5.4.2 from annotations
// in yandex_flutter_task/test/mocks/repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yandex_flutter_task/domain/model/todo.dart' as _i6;
import 'package:yandex_flutter_task/domain/model/todo_list.dart' as _i5;
import 'package:yandex_flutter_task/domain/repository/todos_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodosRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosRepository extends _i1.Mock implements _i3.TodosRepository {
  MockTodosRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i5.TodoList>> getTodos() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i5.TodoList>>.value(
            _FakeEither_0<Exception, _i5.TodoList>(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i5.TodoList>>);
  @override
  _i4.Future<_i2.Either<Exception, _i5.TodoList>> patchTodos(
    _i5.TodoList? todos,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchTodos,
          [
            todos,
            revision,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i5.TodoList>>.value(
            _FakeEither_0<Exception, _i5.TodoList>(
          this,
          Invocation.method(
            #patchTodos,
            [
              todos,
              revision,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i5.TodoList>>);
  @override
  _i4.Future<_i2.Either<Exception, _i6.Todo>> createTodo(
    _i6.Todo? todo,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [
            todo,
            revision,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i6.Todo>>.value(
            _FakeEither_0<Exception, _i6.Todo>(
          this,
          Invocation.method(
            #createTodo,
            [
              todo,
              revision,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i6.Todo>>);
  @override
  _i4.Future<_i2.Either<Exception, _i6.Todo>> updateTodo(
    _i6.Todo? todo,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            todo,
            revision,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i6.Todo>>.value(
            _FakeEither_0<Exception, _i6.Todo>(
          this,
          Invocation.method(
            #updateTodo,
            [
              todo,
              revision,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i6.Todo>>);
  @override
  _i4.Future<_i2.Either<Exception, _i6.Todo>> deleteTodo(
    String? id,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [
            id,
            revision,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i6.Todo>>.value(
            _FakeEither_0<Exception, _i6.Todo>(
          this,
          Invocation.method(
            #deleteTodo,
            [
              id,
              revision,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i6.Todo>>);
}
