// Mocks generated by Mockito 5.4.2 from annotations
// in yandex_flutter_task/test/mocks/remote_datasource.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:yandex_flutter_task/data/datasource/remote_datasource/remote_datasource.dart'
    as _i4;
import 'package:yandex_flutter_task/domain/model/todo.dart' as _i3;
import 'package:yandex_flutter_task/domain/model/todo_list.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoList_0 extends _i1.SmartFake implements _i2.TodoList {
  _FakeTodoList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodo_1 extends _i1.SmartFake implements _i3.Todo {
  _FakeTodo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i4.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TodoList> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i5.Future<_i2.TodoList>.value(_FakeTodoList_0(
          this,
          Invocation.method(
            #getTodos,
            [],
          ),
        )),
      ) as _i5.Future<_i2.TodoList>);
  @override
  _i5.Future<_i2.TodoList> patchTodos(
    _i2.TodoList? todos,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchTodos,
          [
            todos,
            revision,
          ],
        ),
        returnValue: _i5.Future<_i2.TodoList>.value(_FakeTodoList_0(
          this,
          Invocation.method(
            #patchTodos,
            [
              todos,
              revision,
            ],
          ),
        )),
      ) as _i5.Future<_i2.TodoList>);
  @override
  _i5.Future<_i3.Todo> createTodo(
    _i3.Todo? todo,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [
            todo,
            revision,
          ],
        ),
        returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #createTodo,
            [
              todo,
              revision,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Todo>);
  @override
  _i5.Future<_i3.Todo> updateTodo(
    _i3.Todo? todo,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            todo,
            revision,
          ],
        ),
        returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #updateTodo,
            [
              todo,
              revision,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Todo>);
  @override
  _i5.Future<_i3.Todo> deleteTodo(
    String? id,
    int? revision,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [
            id,
            revision,
          ],
        ),
        returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #deleteTodo,
            [
              id,
              revision,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Todo>);
}
